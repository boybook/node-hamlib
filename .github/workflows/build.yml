name: Build Precompiled Binaries

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # 多平台并行构建
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            target: linux-x64
            hamlib_install: |
              sudo apt-get update
              sudo apt-get install -y libhamlib-dev libhamlib-utils
          - os: ubuntu-latest  # 使用Ubuntu模拟ARM64构建（实际项目可能需要真实的ARM runner）
            arch: arm64
            target: linux-arm64
            hamlib_install: |
              sudo apt-get update
              sudo apt-get install -y libhamlib-dev libhamlib-utils
          # - os: windows-latest
          #   arch: x64
          #   target: win32-x64
          #   hamlib_install: |
          #     echo "Setting up Windows build environment"
          #     # Windows 环境下通过 vcpkg 或其他方式安装 hamlib
          #     # 暂时跳过 hamlib 安装，依赖项目内置的 hamlib 构建逻辑
          - os: macos-latest
            arch: arm64
            target: darwin-arm64
            hamlib_install: |
              brew install hamlib
              pip3 install setuptools --break-system-packages || true

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Hamlib dependencies
      run: ${{ matrix.hamlib_install }}

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build node-hamlib
      run: npm run build

    - name: Verify build output
      shell: bash
      run: |
        if [ -f "build/Release/hamlib.node" ]; then
          echo "✅ Build successful: hamlib.node found"
          file build/Release/hamlib.node || true
          ls -la build/Release/hamlib.node
        else
          echo "❌ Error: hamlib.node not found"
          ls -la build/Release/ || true
          exit 1
        fi

    - name: Create platform binary
      shell: bash
      run: |
        mkdir -p dist/${{ matrix.target }}
        cp build/Release/hamlib.node dist/${{ matrix.target }}/
        echo "Binary created for ${{ matrix.target }}"

    # 上传每个平台的构建产物为独立的artifact
    - name: Upload platform artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.target }}
        path: dist/${{ matrix.target }}/
        retention-days: 1  # 只保留1天，因为最终会合并

  # 收集所有平台构建产物并统一打包
  package:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Create prebuilds directory structure
      run: |
        mkdir -p prebuilds
        echo "Created prebuilds directory for collecting all platform binaries"

    # 下载所有平台的构建产物
    - name: Download linux-x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: binary-linux-x64
        path: prebuilds/linux-x64/

    - name: Download linux-arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: binary-linux-arm64
        path: prebuilds/linux-arm64/

    - name: Download darwin-arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: binary-darwin-arm64
        path: prebuilds/darwin-arm64/

    # - name: Download win32-x64 artifact
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: binary-win32-x64
    #     path: prebuilds/win32-x64/

    - name: Verify collected binaries
      run: |
        echo "📋 Collected prebuilds structure:"
        find prebuilds -type f -name "*.node" | sort
        echo ""
        echo "📊 Binary details:"
        for binary in $(find prebuilds -name "*.node"); do
          echo "🔹 $binary"
          ls -la "$binary"
          file "$binary" || true
          echo ""
        done

    - name: Create unified prebuilds package
      run: |
        # 创建版本信息文件
        cat > prebuilds/BUILD_INFO.txt << EOF
        Node-HamLib Precompiled Binaries
        ================================
        Build Time: $(date -u)
        Git Commit: ${{ github.sha }}
        Git Ref: ${{ github.ref }}
        
        Supported Platforms:
        EOF
        
        # 添加平台信息
        for dir in prebuilds/*/; do
          if [ -d "$dir" ] && [ "$(basename "$dir")" != "BUILD_INFO.txt" ]; then
            platform=$(basename "$dir")
            echo "- $platform" >> prebuilds/BUILD_INFO.txt
          fi
        done
        
        echo "" >> prebuilds/BUILD_INFO.txt
        echo "Installation: Extract to your project's prebuilds/ directory" >> prebuilds/BUILD_INFO.txt
        
        # 验证构建产物
        echo "🔍 Verifying build artifacts..."
        EXPECTED_PLATFORMS=("linux-x64" "linux-arm64" "darwin-arm64")
        FOUND_PLATFORMS=0
        
        for platform in "${EXPECTED_PLATFORMS[@]}"; do
          if [ -f "prebuilds/$platform/hamlib.node" ]; then
            echo "✅ Found binary for $platform"
            FOUND_PLATFORMS=$((FOUND_PLATFORMS + 1))
          else
            echo "❌ Missing binary for $platform"
          fi
        done
        
        if [ $FOUND_PLATFORMS -eq ${#EXPECTED_PLATFORMS[@]} ]; then
          echo "🎉 All $FOUND_PLATFORMS platform binaries verified successfully"
        else
          echo "❌ Build verification failed: $FOUND_PLATFORMS/${#EXPECTED_PLATFORMS[@]} platforms found"
          exit 1
        fi
        
        # 创建统一的zip包
        cd prebuilds
        zip -r ../node-hamlib-prebuilds.zip . -x "*.DS_Store" "*/.*"
        cd ..
        
        echo "📦 Created unified package: node-hamlib-prebuilds.zip"
        ls -la node-hamlib-prebuilds.zip

    - name: Generate package summary
      id: package_info
      run: |
        PACKAGE_SIZE=$(ls -la node-hamlib-prebuilds.zip | awk '{print $5}')
        PLATFORM_COUNT=$(find prebuilds -name "*.node" | wc -l)
        
        echo "package_size=$PACKAGE_SIZE" >> $GITHUB_OUTPUT
        echo "platform_count=$PLATFORM_COUNT" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u)" >> $GITHUB_OUTPUT

    # 上传最终的统一包
    - name: Upload unified prebuilds package
      uses: actions/upload-artifact@v4
      with:
        name: node-hamlib-prebuilds
        path: node-hamlib-prebuilds.zip
        retention-days: 90

    # 如果是标签推送，创建GitHub Release
    - name: Create GitHub Release (on tags)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: "Node-HamLib ${{ github.ref_name }}"
        draft: false
        prerelease: false
        artifacts: node-hamlib-prebuilds.zip
        body: |
          # Node-HamLib ${{ github.ref_name }}
          
          ## 📦 Precompiled Binaries Package
          
          This release includes precompiled binaries for multiple platforms:
          
          **Platforms included:** 3 platforms (Linux x64/ARM64, macOS ARM64)  
          **Package size:** ${{ steps.package_info.outputs.package_size }} bytes  
          **Build date:** ${{ steps.package_info.outputs.build_date }}
          
          ### Installation
          
          1. Download `node-hamlib-prebuilds.zip`
          2. Extract to your project's `prebuilds/` directory
          3. The binaries will be automatically detected and used
          
          ### Supported Platforms
          
          - ✅ Linux x64
          - ✅ Linux ARM64  
          - ✅ macOS ARM64 (Apple Silicon)
          <!-- - ✅ Windows x64 -->
          
          ### Usage
          
          ```bash
          npm install node-hamlib
          ```
          
          The precompiled binaries will be automatically used if available for your platform, otherwise it will fall back to building from source.

  # 清理临时artifacts（可选）
  cleanup:
    needs: [build, package]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete temporary platform artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          binary-linux-x64
          binary-linux-arm64
          binary-darwin-arm64
        failOnError: false


