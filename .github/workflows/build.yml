name: Build Precompiled Binaries

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            target: linux-x64
            hamlib_install: |
              sudo apt-get update
              sudo apt-get install -y libhamlib-dev libhamlib-utils
          - os: ubuntu-24.04-arm
            arch: arm64
            target: linux-arm64
            hamlib_install: |
              sudo apt-get update
              sudo apt-get install -y libhamlib-dev libhamlib-utils
          # - os: windows-latest
          #   arch: x64
          #   target: win32-x64
          #   hamlib_install: echo "Windows hamlib will be built from source"
          - os: macos-latest
            arch: arm64
            target: darwin-arm64
            hamlib_install: |
              brew install hamlib
              pip3 install setuptools --break-system-packages || true

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Hamlib dependencies
      run: ${{ matrix.hamlib_install }}

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build node-hamlib
      run: npm run build

    - name: Create binary package
      shell: bash
      run: |
        mkdir -p prebuilds/${{ matrix.target }}
        if [ -f "build/Release/hamlib.node" ]; then
          cp build/Release/hamlib.node prebuilds/${{ matrix.target }}/
          echo "Binary package created successfully"
        else
          echo "Error: hamlib.node not found"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: prebuilds/${{ matrix.target }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: prebuilds
        merge-multiple: true

    - name: Restructure artifacts
      run: |
        mkdir -p final-prebuilds
        
        # List what we actually downloaded
        echo "Downloaded artifacts:"
        find prebuilds -type f -name "*.node" || echo "No .node files found"
        ls -la prebuilds/
        
        # Move all available artifacts to final-prebuilds
        for target_dir in prebuilds/*/; do
          if [ -d "$target_dir" ]; then
            target_name=$(basename "$target_dir")
            echo "Processing target: $target_name"
            if [ -f "$target_dir/hamlib.node" ]; then
              mkdir -p "final-prebuilds/$target_name"
              cp "$target_dir/hamlib.node" "final-prebuilds/$target_name/"
              echo "✓ Moved $target_name/hamlib.node"
            else
              echo "⚠ No hamlib.node found in $target_name"
            fi
          fi
        done
        
        # List final structure
        echo "Final prebuilds structure:"
        find final-prebuilds -type f

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install hamlib dependencies for release
      run: |
        sudo apt-get update
        sudo apt-get install -y libhamlib-dev libhamlib-utils

    - name: Prepare package
      run: |
        # Copy prebuilds to the package
        cp -r final-prebuilds/* prebuilds/ || true
        
        # Install dependencies for packaging
        npm ci
        
        # Create package
        npm pack --dry-run

    - name: Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
        npm publish
      if: env.NODE_AUTH_TOKEN != ''
