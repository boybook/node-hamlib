name: Build Precompiled Binaries

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # 多平台并行构建
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            target: linux-x64
            hamlib_install: |
              sudo apt-get update
              sudo apt-get install -y libhamlib-dev libhamlib-utils
          - os: ubuntu-24.04-arm
            arch: arm64
            target: linux-arm64
            hamlib_install: |
              sudo apt-get update
              sudo apt-get install -y libhamlib-dev libhamlib-utils
          - os: windows-latest
            arch: x64
            target: win32-x64
            hamlib_install: |
              echo "Setting up Windows hamlib via vcpkg"
              git clone https://github.com/microsoft/vcpkg "$env:GITHUB_WORKSPACE\vcpkg"
              & "$env:GITHUB_WORKSPACE\vcpkg\bootstrap-vcpkg.bat"
              & "$env:GITHUB_WORKSPACE\vcpkg\vcpkg.exe" install hamlib:x64-windows
              echo "HAMLIB_ROOT=$env:GITHUB_WORKSPACE\vcpkg\installed\x64-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              echo "$env:GITHUB_WORKSPACE\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          - os: macos-latest
            arch: arm64
            target: darwin-arm64
            hamlib_install: |
              brew install hamlib
              pip3 install setuptools --break-system-packages || true

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Hamlib dependencies
      run: ${{ matrix.hamlib_install }}

    - name: Install Node.js dependencies (skip scripts)
      run: npm ci --ignore-scripts

    - name: Generate prebuilds and bundle hamlib
      run: npm run prebuild:bundle

    - name: List generated prebuilds
      shell: bash
      run: |
        echo "Generated prebuilds:"
        find prebuilds -maxdepth 2 -type f \( -name "*.node" -o -name "libhamlib.*" -o -name "*hamlib*.dll" \) -print || true

    # 上传每个平台的预编译产物
    - name: Upload platform prebuilds artifact
      uses: actions/upload-artifact@v4
      with:
        name: prebuilds-${{ matrix.target }}
        path: prebuilds/**
        retention-days: 1  # 只保留1天，因为最终会合并

  # 收集所有平台构建产物并统一打包
  package:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Prepare prebuilds directory
      run: |
        mkdir -p prebuilds
        echo "Prepared prebuilds directory for collecting platform prebuilds"

    # 下载所有平台的构建产物
    - name: Download linux-x64 prebuilds
      uses: actions/download-artifact@v4
      with:
        name: prebuilds-linux-x64
        path: prebuilds

    - name: Download linux-arm64 prebuilds
      uses: actions/download-artifact@v4
      with:
        name: prebuilds-linux-arm64
        path: prebuilds

    - name: Download darwin-arm64 prebuilds
      uses: actions/download-artifact@v4
      with:
        name: prebuilds-darwin-arm64
        path: prebuilds

    - name: Flatten prebuilds directory
      shell: bash
      run: |
        if [ -d prebuilds/prebuilds ]; then
          echo "Flattening nested prebuilds directory..."
          shopt -s dotglob nullglob || true
          mv prebuilds/prebuilds/* prebuilds/ || true
          rm -rf prebuilds/prebuilds || true
        fi

    - name: Debug list prebuilds
      run: |
        echo "Listing prebuilds content before verify:"
        find prebuilds -maxdepth 4 -type f -print | sort || true

    - name: Download win32-x64 prebuilds
      uses: actions/download-artifact@v4
      with:
        name: prebuilds-win32-x64
        path: prebuilds

    - name: Verify collected prebuilds
      run: node .github/scripts/verify-build.js

    - name: Create unified prebuilds package
      run: |
        # 创建版本信息文件
        cat > prebuilds/BUILD_INFO.txt << EOF
        Node-HamLib Precompiled Binaries
        ================================
        Build Time: $(date -u)
        Git Commit: ${{ github.sha }}
        Git Ref: ${{ github.ref }}
        
        Supported Platforms:
        EOF
        
        # 添加平台信息
        for dir in prebuilds/*/; do
          if [ -d "$dir" ] && [ "$(basename "$dir")" != "BUILD_INFO.txt" ]; then
            platform=$(basename "$dir")
            echo "- $platform" >> prebuilds/BUILD_INFO.txt
          fi
        done
        
        echo "" >> prebuilds/BUILD_INFO.txt
        echo "Installation: Extract to your project's prebuilds/ directory" >> prebuilds/BUILD_INFO.txt
        
        # 创建统一的zip包
        cd prebuilds
        zip -r ../node-hamlib-prebuilds.zip . -x "*.DS_Store" "*/.*"
        cd ..
        
        echo "📦 Created unified package: node-hamlib-prebuilds.zip"
        ls -la node-hamlib-prebuilds.zip

    - name: Generate package summary
      id: package_info
      run: |
        PACKAGE_SIZE=$(ls -la node-hamlib-prebuilds.zip | awk '{print $5}')
        PLATFORM_COUNT=$(find prebuilds -name "*.node" | wc -l)
        
        echo "package_size=$PACKAGE_SIZE" >> $GITHUB_OUTPUT
        echo "platform_count=$PLATFORM_COUNT" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u)" >> $GITHUB_OUTPUT

    # 上传最终的统一包
    - name: Upload unified prebuilds package
      uses: actions/upload-artifact@v4
      with:
        name: node-hamlib-prebuilds
        path: node-hamlib-prebuilds.zip
        retention-days: 90

    # 如果是标签推送，创建GitHub Release
    - name: Create GitHub Release (on tags)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: "Node-HamLib ${{ github.ref_name }}"
        draft: false
        prerelease: false
        artifacts: node-hamlib-prebuilds.zip
        body: |
          # Node-HamLib ${{ github.ref_name }}
          
          ## 📦 Precompiled Binaries Package
          
          This release includes precompiled binaries for multiple platforms:
          
          **Platforms included:** 3 platforms (Linux x64/ARM64, macOS ARM64)  
          **Package size:** ${{ steps.package_info.outputs.package_size }} bytes  
          **Build date:** ${{ steps.package_info.outputs.build_date }}
          
          ### Installation
          
          1. Download `node-hamlib-prebuilds.zip`
          2. Extract to your project's `prebuilds/` directory
          3. The binaries will be automatically detected and used
          
          ### Supported Platforms
          
          - ✅ Linux x64
          - ✅ Linux ARM64  
          - ✅ macOS ARM64 (Apple Silicon)
          <!-- - ✅ Windows x64 -->
          
          ### Usage
          
          ```bash
          npm install node-hamlib
          ```
          
          The precompiled binaries will be automatically used if available for your platform, otherwise it will fall back to building from source.

  # 清理临时artifacts（可选）
  cleanup:
    needs: [build, package]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete temporary platform artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          prebuilds-linux-x64
          prebuilds-linux-arm64
          prebuilds-darwin-arm64
          prebuilds-win32-x64
        failOnError: false
